name: Test Coverage

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  test-coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Fortran Package Manager
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm

    - name: Install GFortran, CMake, gcov, and PIL
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran gcovr cmake ffmpeg python3-pil pngcheck

    - name: Set compiler
      run: |
        echo "FC=gfortran" >> $GITHUB_ENV
        echo "FPM_FC=gfortran" >> $GITHUB_ENV

    - name: Build with coverage flags
      run: |
        make build ARGS="--flag '-fprofile-arcs -ftest-coverage'"

    - name: Run FPM tests with coverage
      run: |
        mkdir -p /tmp/test
        make test ARGS="--flag '-fprofile-arcs -ftest-coverage'"

    - name: Test FPM example build
      run: |
        make test ARGS="--target test_system_fpm_example"

    - name: Test CMake example build
      run: |
        make test ARGS="--target test_system_cmake_example"

    - name: Validate PNG output with PIL
      run: |
        python3 -c "
        from PIL import Image
        import glob
        import os
        
        # Find PNG files generated during tests
        png_files = glob.glob('output/**/*.png', recursive=True)
        if not png_files:
            print('⚠️  No PNG files found for validation')
            exit(0)
            
        validated_count = 0
        for png_file in png_files[:10]:  # Validate first 10 files
            try:
                # Test PIL compatibility
                img = Image.open(png_file)
                width, height = img.size
                mode = img.mode
                print(f'✅ {os.path.basename(png_file)}: {width}x{height} {mode}')
                
                # Test structure validation
                img_verify = Image.open(png_file)
                img_verify.verify()
                validated_count += 1
                
            except Exception as e:
                print(f'❌ {os.path.basename(png_file)}: {e}')
                exit(1)
                
        print(f'✅ PIL validation passed for {validated_count} PNG files')
        "

    - name: Generate coverage report
      if: always()
      run: |
        gcovr --root . --exclude 'thirdparty/*' --exclude 'build/*' --exclude 'doc/*' --exclude 'example/*' --exclude 'test/*' --xml -o coverage.xml --print-summary

    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
